{"ast":null,"code":"var _serverRuntimeConfig$;\n\nimport getConfig from 'next/config';\nconst {\n  serverRuntimeConfig,\n  publicRuntimeConfig\n} = getConfig();\n\nclass ApiRoute {\n  constructor(routes, apiRoute) {\n    this.routes = routes;\n    this.apiRoute = apiRoute;\n  }\n\n  get(route) {\n    return !(route in this.routes) ? \"\" : `${this.apiRoute}/${this.routes[route]}`;\n  }\n\n  getImage(image) {\n    return `${this.apiRoute}/api/public/${image}`;\n  }\n\n}\n\nconst api = (_serverRuntimeConfig$ = serverRuntimeConfig.WEB) !== null && _serverRuntimeConfig$ !== void 0 ? _serverRuntimeConfig$ : publicRuntimeConfig.WEB;\nconst apiRoute = new ApiRoute({\n  login: \"api/auth/login\",\n  webs: \"api/webs\",\n  update: \"api/auth\",\n  register: \"api/auth/signup\"\n}, api);\nexport { apiRoute };","map":{"version":3,"sources":["/Users/rafaelgonzalezmunoz/IdeaProjects/microservices/service-auth-front/src/config/apiRoute.ts"],"names":["getConfig","serverRuntimeConfig","publicRuntimeConfig","ApiRoute","constructor","routes","apiRoute","get","route","getImage","image","api","WEB","login","webs","update","register"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,aAAtB;AAEA,MAAM;AAACC,EAAAA,mBAAD;AAAsBC,EAAAA;AAAtB,IAA6CF,SAAS,EAA5D;;AAEA,MAAMG,QAAN,CAAe;AACXC,EAAAA,WAAW,CACCC,MADD,EAECC,QAFD,EAGT;AAAA,SAFUD,MAEV,GAFUA,MAEV;AAAA,SADUC,QACV,GADUA,QACV;AACD;;AAEMC,EAAAA,GAAP,CAAWC,KAAX,EAAkC;AAC9B,WAAO,EAAEA,KAAK,IAAI,KAAKH,MAAhB,IAA0B,EAA1B,GAAgC,GAAE,KAAKC,QAAS,IAAG,KAAKD,MAAL,CAAYG,KAAZ,CAAmB,EAA7E;AACH;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAgB;AACpB,WAAQ,GAAE,KAAKJ,QAAS,eAAcI,KAAM,EAA5C;AACH;;AAbU;;AAgBf,MAAMC,GAAG,4BAAGV,mBAAmB,CAACW,GAAvB,yEAA8BV,mBAAmB,CAACU,GAA3D;AACA,MAAMN,QAAkB,GAAG,IAAIH,QAAJ,CAAa;AACpCU,EAAAA,KAAK,EAAE,gBAD6B;AAEpCC,EAAAA,IAAI,EAAE,UAF8B;AAGpCC,EAAAA,MAAM,EAAE,UAH4B;AAIpCC,EAAAA,QAAQ,EAAE;AAJ0B,CAAb,EAKxBL,GALwB,CAA3B;AAMA,SAASL,QAAT","sourcesContent":["import getConfig from 'next/config'\n\nconst {serverRuntimeConfig, publicRuntimeConfig} = getConfig();\n\nclass ApiRoute {\n    constructor(\n        private routes: { [p: string]: string },\n        private apiRoute: string\n    ) {\n    }\n\n    public get(route: string): string {\n        return !(route in this.routes) ? \"\" : `${this.apiRoute}/${this.routes[route]}`;\n    }\n\n    getImage(image: string) {\n        return `${this.apiRoute}/api/public/${image}`;\n    }\n}\n\nconst api = serverRuntimeConfig.WEB ?? publicRuntimeConfig.WEB;\nconst apiRoute: ApiRoute = new ApiRoute({\n    login: \"api/auth/login\",\n    webs: \"api/webs\",\n    update: \"api/auth\",\n    register: \"api/auth/signup\",\n}, api);\nexport { apiRoute }\n"]},"metadata":{},"sourceType":"module"}