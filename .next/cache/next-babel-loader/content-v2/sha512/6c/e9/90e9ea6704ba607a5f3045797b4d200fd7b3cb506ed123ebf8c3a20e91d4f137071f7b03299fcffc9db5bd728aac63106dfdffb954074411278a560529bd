{"ast":null,"code":"import _classCallCheck from \"/Users/rafaelgonzalezmunoz/IdeaProjects/microservices/service-auth-front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rafaelgonzalezmunoz/IdeaProjects/microservices/service-auth-front/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar _serverRuntimeConfig$;\n\nimport getConfig from 'next/config';\n\nvar _getConfig = getConfig(),\n    serverRuntimeConfig = _getConfig.serverRuntimeConfig,\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar ApiRoute = /*#__PURE__*/function () {\n  function ApiRoute(routes, apiRoute) {\n    _classCallCheck(this, ApiRoute);\n\n    this.routes = routes;\n    this.apiRoute = apiRoute;\n  }\n\n  _createClass(ApiRoute, [{\n    key: \"get\",\n    value: function get(route) {\n      return !(route in this.routes) ? \"\" : \"\".concat(this.apiRoute, \"/\").concat(this.routes[route]);\n    }\n  }, {\n    key: \"getImage\",\n    value: function getImage(image) {\n      return \"\".concat(this.apiRoute, \"/api/public/\").concat(image);\n    }\n  }]);\n\n  return ApiRoute;\n}();\n\nvar api = (_serverRuntimeConfig$ = serverRuntimeConfig.WEB) !== null && _serverRuntimeConfig$ !== void 0 ? _serverRuntimeConfig$ : publicRuntimeConfig.WEB;\nvar apiRoute = new ApiRoute({\n  login: \"api/auth/login\",\n  webs: \"api/webs\",\n  update: \"api/auth\",\n  register: \"api/auth/signup\"\n}, api);\nconsole.log(process.env);\nexport { apiRoute };","map":{"version":3,"sources":["/Users/rafaelgonzalezmunoz/IdeaProjects/microservices/service-auth-front/src/config/apiRoute.ts"],"names":["getConfig","serverRuntimeConfig","publicRuntimeConfig","ApiRoute","routes","apiRoute","route","image","api","WEB","login","webs","update","register","console","log","process","env"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,aAAtB;;iBAEmDA,SAAS,E;IAArDC,mB,cAAAA,mB;IAAqBC,mB,cAAAA,mB;;IAEtBC,Q;AACF,oBACYC,MADZ,EAEYC,QAFZ,EAGE;AAAA;;AAAA,SAFUD,MAEV,GAFUA,MAEV;AAAA,SADUC,QACV,GADUA,QACV;AACD;;;;wBAEUC,K,EAAuB;AAC9B,aAAO,EAAEA,KAAK,IAAI,KAAKF,MAAhB,IAA0B,EAA1B,aAAkC,KAAKC,QAAvC,cAAmD,KAAKD,MAAL,CAAYE,KAAZ,CAAnD,CAAP;AACH;;;6BAEQC,K,EAAe;AACpB,uBAAU,KAAKF,QAAf,yBAAsCE,KAAtC;AACH;;;;;;AAGL,IAAMC,GAAG,4BAAGP,mBAAmB,CAACQ,GAAvB,yEAA8BP,mBAAmB,CAACO,GAA3D;AACA,IAAMJ,QAAkB,GAAG,IAAIF,QAAJ,CAAa;AACpCO,EAAAA,KAAK,EAAE,gBAD6B;AAEpCC,EAAAA,IAAI,EAAE,UAF8B;AAGpCC,EAAAA,MAAM,EAAE,UAH4B;AAIpCC,EAAAA,QAAQ,EAAE;AAJ0B,CAAb,EAKxBL,GALwB,CAA3B;AAMAM,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAApB;AACA,SAASZ,QAAT","sourcesContent":["import getConfig from 'next/config'\n\nconst {serverRuntimeConfig, publicRuntimeConfig} = getConfig();\n\nclass ApiRoute {\n    constructor(\n        private routes: { [p: string]: string },\n        private apiRoute: string\n    ) {\n    }\n\n    public get(route: string): string {\n        return !(route in this.routes) ? \"\" : `${this.apiRoute}/${this.routes[route]}`;\n    }\n\n    getImage(image: string) {\n        return `${this.apiRoute}/api/public/${image}`;\n    }\n}\n\nconst api = serverRuntimeConfig.WEB ?? publicRuntimeConfig.WEB;\nconst apiRoute: ApiRoute = new ApiRoute({\n    login: \"api/auth/login\",\n    webs: \"api/webs\",\n    update: \"api/auth\",\n    register: \"api/auth/signup\",\n}, api);\nconsole.log(process.env);\nexport { apiRoute }\n"]},"metadata":{},"sourceType":"module"}