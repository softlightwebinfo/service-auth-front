{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/rafaelgonzalezmunoz/IdeaProjects/microservices/service-auth-front/pages/dashboard/setting.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { Dashboard } from \"../../src/components/Dashboard\";\nimport { Input } from \"../../src/components/Input\";\nimport { Button } from \"../../src/components/Button\";\nimport { apiRoute } from \"../../src/config/apiRoute\";\nexport default function Setting() {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    username: \"\",\n    name: \"\",\n    loader: false\n  });\n\n  const onChange = evt => {\n    setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      [evt.target.name]: evt.target.value\n    }));\n  };\n\n  const onSave = async () => {\n    if (!state.username.length || !state.name.length) {\n      return;\n    }\n\n    setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      loader: true\n    }));\n    const xhr = await fetch(apiRoute.get(\"update\")).then(rs => rs.json());\n    console.log(xhr);\n    setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      loader: false,\n      username: \"\",\n      name: \"\"\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dashboard, {\n    title: \"Setting\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSave,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        onChange: onChange,\n        value: state.username,\n        placeholder: \"Email\",\n        name: \"username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        onChange: onChange,\n        value: state.name,\n        placeholder: \"Name\",\n        name: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        loader: state.loader,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/rafaelgonzalezmunoz/IdeaProjects/microservices/service-auth-front/pages/dashboard/setting.tsx"],"names":["React","useState","Dashboard","Input","Button","apiRoute","Setting","state","setState","username","name","loader","onChange","evt","prev","target","value","onSave","length","xhr","fetch","get","then","rs","json","console","log"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,gCAA1B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,MAAT,QAAuB,6BAAvB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAEA,eAAe,SAASC,OAAT,GAAmB;AAC9B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAC;AAC/BQ,IAAAA,QAAQ,EAAE,EADqB;AAE/BC,IAAAA,IAAI,EAAE,EAFyB;AAG/BC,IAAAA,MAAM,EAAE;AAHuB,GAAD,CAAlC;;AAKA,QAAMC,QAAQ,GAAIC,GAAD,IAAS;AACtBL,IAAAA,QAAQ,CAACM,IAAI,oCAASA,IAAT;AAAe,OAACD,GAAG,CAACE,MAAJ,CAAWL,IAAZ,GAAmBG,GAAG,CAACE,MAAJ,CAAWC;AAA7C,MAAL,CAAR;AACH,GAFD;;AAGA,QAAMC,MAAM,GAAG,YAAY;AACvB,QAAI,CAACV,KAAK,CAACE,QAAN,CAAeS,MAAhB,IAA0B,CAACX,KAAK,CAACG,IAAN,CAAWQ,MAA1C,EAAkD;AAC9C;AACH;;AACDV,IAAAA,QAAQ,CAACM,IAAI,oCAASA,IAAT;AAAeH,MAAAA,MAAM,EAAE;AAAvB,MAAL,CAAR;AACA,UAAMQ,GAAG,GAAG,MAAMC,KAAK,CAACf,QAAQ,CAACgB,GAAT,CAAa,QAAb,CAAD,CAAL,CAA8BC,IAA9B,CAAmCC,EAAE,IAAIA,EAAE,CAACC,IAAH,EAAzC,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACAX,IAAAA,QAAQ,CAACM,IAAI,oCAASA,IAAT;AAAeH,MAAAA,MAAM,EAAE,KAAvB;AAA8BF,MAAAA,QAAQ,EAAE,EAAxC;AAA4CC,MAAAA,IAAI,EAAE;AAAlD,MAAL,CAAR;AACH,GARD;;AASA,sBACI,QAAC,SAAD;AAAW,IAAA,KAAK,EAAE,SAAlB;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEO,MAAhB;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,QAAQ,EAAEL,QAAjB;AAA2B,QAAA,KAAK,EAAEL,KAAK,CAACE,QAAxC;AAAkD,QAAA,WAAW,EAAE,OAA/D;AAAwE,QAAA,IAAI,EAAE;AAA9E;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,QAAQ,EAAEG,QAAjB;AAA2B,QAAA,KAAK,EAAEL,KAAK,CAACG,IAAxC;AAA8C,QAAA,WAAW,EAAE,MAA3D;AAAmE,QAAA,IAAI,EAAE;AAAzE;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,QAAd;AAAwB,QAAA,MAAM,EAAEH,KAAK,CAACI,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH","sourcesContent":["import React, { useState } from \"react\";\nimport { Dashboard } from \"../../src/components/Dashboard\";\nimport { Input } from \"../../src/components/Input\";\nimport { Button } from \"../../src/components/Button\";\nimport { apiRoute } from \"../../src/config/apiRoute\";\n\nexport default function Setting() {\n    const [state, setState] = useState({\n        username: \"\",\n        name: \"\",\n        loader: false,\n    });\n    const onChange = (evt) => {\n        setState(prev => ({...prev, [evt.target.name]: evt.target.value}));\n    };\n    const onSave = async () => {\n        if (!state.username.length || !state.name.length) {\n            return;\n        }\n        setState(prev => ({...prev, loader: true}));\n        const xhr = await fetch(apiRoute.get(\"update\")).then(rs => rs.json());\n        console.log(xhr);\n        setState(prev => ({...prev, loader: false, username: \"\", name: \"\"}));\n    };\n    return (\n        <Dashboard title={\"Setting\"}>\n            <form onSubmit={onSave}>\n                <Input onChange={onChange} value={state.username} placeholder={\"Email\"} name={\"username\"}/>\n                <Input onChange={onChange} value={state.name} placeholder={\"Name\"} name={\"name\"}/>\n                <Button type={\"submit\"} loader={state.loader}>Save</Button>\n            </form>\n        </Dashboard>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}